/*
 * Project 3: Tree-Based Encryption
 * File: bst-student-proj3.h
 * Author: Jan Jasa
 * Course: CSI 3334
 * Due Date: October 6, 2023
 * version: 1.4
 *
 * This file contains the functions for BST, BSTNode,
 * and EncryptionTree class. For BST, it contains
 * insert(), and remove(). For BSTNode,it contains
 * ~BSTNode(), printPreorder(), minNode(), and maxNode().
 * For EncryptionTree, it contains encrypt() and decrypt().
 *
 * (The use of the operator ">" is avoided)
 */

#ifndef PROJECT_3_BST_STUDENT_PROJ3_H
#define PROJECT_3_BST_STUDENT_PROJ3_H

#include "bst-prof-proj3.h"


/**
 * ~BSTNode()
 *
 * This function is the destructor for the BSTNode class.
 * It will delete the left and right pointers, setting them
 * to NULL afterwards.
 *
 * Parameters:
 *  N/A
 *
 * Return Value: N/A
 */
template <class Base>
BSTNode<Base>::~BSTNode(){
    delete this->right;
    delete this->left;
    this->right = NULL;
    this->left = NULL;
}

/**
 * printPreorder()
 *
 * This function is the constructor for the Location class.
 * It initializes word, iterationMode, indexToChange, and nextLetter.
 *
 * Parameters:
 *  os: given ostream, that allows for the output
 *      of the BST in preorder
 *  indent: string that indents the word by 2 spaces
 *          each time to show structure of the tree
 *
 * Return Value: N/A
 */
template <class Base>
void BSTNode<Base>::printPreorder(ostream &os, string indent) const{
    os << indent << this->data << endl;

    //add two spaces to each indent
    if(this->left!=NULL){
        this->left->printPreorder(os, indent + "  ");
    }
    else{
        os << indent;
        os << "  NULL";
        os << endl;
    }

    if(this->right!=NULL){
        this->right->printPreorder(os, indent+"  ");
    }
    else{
        os << indent;
        os << "  NULL";
        os << endl;
    }
}


/**
 * minNode()
 *
 * This function is returns the smallest value node
 * in a tree/subtree.
 *
 * Parameters:
 *  N/A
 *
 * Return Value: A BSTNode pointer to the minimum node
 */
template <class Base>
const BSTNode<Base>* BSTNode<Base>::minNode() const{
    if(this->left == NULL){
        return this;
    }
    else{
        return this->left->minNode();
    }
}


/**
 * maxNode()
 *
 * This function is returns the largest value node
 * in a tree/subtree.
 *
 * Parameters:
 *  N/A
 *
 * Return Value: A BSTNode pointer to the maximum node
 */
template <class Base>
const BSTNode<Base>* BSTNode<Base>::maxNode() const{
    if(this->right == NULL){
        return this;
    }
    else{
        return this->right->maxNode();
    }
}


/**
 * insert()
 *
 * This function inserts a variable of type Base into the
 * BST. The function starts at root, and if item is less
 * than root, it goes to the left. If it is greater than,
 * it will go right. This process repeats until it finds
 * a null spot to insert the item into. If the item is found
 * in the tree, it is ignored and skipped.
 *
 * Parameters:
 *  item: item is a variable of type base that is to be
 *        inserted into the BST, by abiding BST rules.
 *
 * Return Value: N/A
 */
template <class Base>
void BST<Base>::insert(const Base &item){
    BSTNode<Base> *temp = this->root;

    if(temp==NULL){
        this->root = new BSTNode<Base>(item);
    }
    else{
        bool flag = false;
        while(!flag){
            if(item<temp->data){
                if(temp->left==NULL){
                    temp->left = new BSTNode<Base>(item);
                    flag = true;
                }
                else{
                    temp=temp->left;
                }
            }
            //use "<" operator
            else if(temp->data<item){
                if(temp->right==NULL){
                    temp->right = new BSTNode<Base>(item);
                    flag = true;
                }
                else{
                    temp=temp->right;
                }
            }
            //already in tree, do nothing
            else{
                flag = true;
            }
        }
    }
    temp = NULL;
    delete temp;
}


/**
 * encrypt()
 *
 * This function encrypts a variable of type Base in the
 * BST. The function starts at root with the encryption
 * "r". After this, it follows the BST path in finding the item.
 * If it goes left, it will add a 0. If it goes right, it will
 * add a 1. Once the item is found, it will set found to true.
 * If it isn't found, encryption is set to "?".
 * Essentially:
 * r=root
 * 0=left
 * 1=right
 *
 * Parameters:
 *  item: item is a variable of type base that is to be
 *        encrypted in the BST.
 *
 * Return Value: a string that is the encrypted version of the
 *               item inputted.
 */
template <class Base>
string EncryptionTree<Base>::encrypt(const Base &item) const{
    //can't access BSTNode directly, use get() functions
    string encryption = "r";
    const BSTNode<Base> *temp = this->root;
    bool found = false;

    while(temp!=NULL){
        if(item<temp->getData()){
            encryption += "0";
            temp=temp->getLeft();
        }

        //USE "<" OPERATOR
        else if(temp->getData()<item){
            encryption += "1";
            temp=temp->getRight();
        }

        else {
            //if found, end loop
            temp = NULL;
            found = true;
        }
    }
    delete temp;

    if(!found){
        encryption = "?";
    }

    return encryption;

}

/**
 * decrypt()
 *
 * This function decrypts a variable of type Base in the
 * BST. The function starts at root with the path's "root"
 * "r". After this, it follows the BST path in finding the item.
 * It will go left if a 0 is in the path given. It will go right
 * if a 1 is in the path given. At the end, it gives the address
 * of the temp data.
 * Essentially:
 * r=root
 * 0=left
 * 1=right
 *
 * Parameters:
 *  path: path is a string that contains the "path" of the
 *        encryption, giving it instructions on how to
 *        decode it into a item of type Base.
 *
 * Return Value: the address of the BSTNode temp, which gives
 *               the data of the decrypted path.
 */
template <class Base>
const Base *EncryptionTree<Base>::decrypt(const string &path) const {
    const BSTNode<Base> *temp = this->root;
    int pathSize = path.size();

    //root not found, end process by returning NULL
    if (temp == NULL) {
        return NULL;
    }

    //successful, go along path
    for (int i=1; i<pathSize; i++) {
        if (temp != NULL) {
            if (path[i] == '0') {
                temp = temp->getLeft();
            } else {
                temp = temp->getRight();
            }
        }
    }

    //returns address of pointer to item
    return &temp->getData();
}


/**
 * remove()
 *
 * This function removes an item of type <Base> from the BST.
 * There will be three different ways of removing depending
 * on the situation, removing a node with no children, one child,
 * or two children. For no children, the node will simply be removed.
 * For a node with one child, the child will take place of the removed
 * node's position. For a node with two children, we will take the
 * leftMost node from the right subtree, and promote that.
 *
 * Parameters:
 *  item: item of type <Base> that is to be found, and removed
 *        from the BST.
 *
 * Return Value: N/A
 */
template <class Base>
void BST<Base>::remove(const Base &item){
    bool flag = false;
    BSTNode<Base> *temp = this->root;
    BSTNode<Base> *tempParent = NULL;

    //find the node first
    while(!flag && temp!=NULL){

        if(item<temp->data){
            tempParent=temp;
            temp=temp->left;
        }

        else if(temp->data<item){
            tempParent=temp;
            temp=temp->right;
        }

        else if(!(item<temp->data || temp->data<item)){
            flag = true;
        }
    }

    //remove process
    if(flag){
        //if temp has no children
        if(temp->left==NULL && temp->right==NULL)   {
            //if temp is root, delete root
            if(tempParent==NULL){
                this->root = NULL;
                delete this->root;
            }
            else{
                if(tempParent->left==temp){
                    tempParent->left = NULL;
                    delete tempParent->left;
                }
                else{
                    tempParent->right = NULL;
                    delete tempParent->right;
                }
            }
            temp = NULL;
            delete temp;
        }

        //temp has two children
        else if(temp->left!=NULL && temp->right!=NULL){
            BSTNode<Base> *leftMost = temp->right;
            BSTNode<Base> *leftMostParent = temp;

            //go down left from temp->right
            if(leftMost->left!=NULL){
                while(leftMost->left!=NULL){
                    leftMostParent = leftMost;
                    leftMost = leftMost->left;
                }
                leftMostParent->left = leftMost->right;
                leftMost->right = temp->right;
            }

            leftMost->left = temp->left;

            if(tempParent==NULL){
                this->root = leftMost;
            }
            else{
                if(tempParent->right == temp){
                    tempParent->right = leftMost;
                }
                else{
                    tempParent->left = leftMost;
                }
            }

            temp->left = NULL;
            temp->right = NULL;
            leftMost = NULL;
            leftMostParent = NULL;
            delete leftMost;
            delete leftMostParent;
            delete temp;
            //delete tempParent;
        }

        //temp has one child
        else if(temp->left != NULL || temp->right != NULL){
            //root is NULL
            if(tempParent==NULL){
                if(temp->left!=NULL){
                    this->root = temp->left;
                    temp->left = NULL;
                }
                else{
                    this->root = temp->right;
                    temp->right = NULL;
                }
            }
            //if left child is the remove node
            else if(tempParent->left == temp){
                if(temp->left != NULL){
                    tempParent->left = temp->left;
                    temp->left = NULL;
                }
                else{
                    tempParent->left = temp->right;
                    temp->right = NULL;
                }
            }
            //if right child is the remove node
            else if(tempParent->right == temp){
                if(temp->left!=NULL){
                    tempParent->right = temp->left;
                    temp->left = NULL;
                }
                else{
                    tempParent->right = temp->right;
                    temp->right = NULL;
                }
            }
            temp = NULL;
            delete temp;
        }
    }
}

#endif //PROJECT_3_BST_STUDENT_PROJ3_H
